version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: db-problems-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: dbproblems
      MYSQL_USER: dbuser
      MYSQL_PASSWORD: dbpassword
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Python Backend
  backend:
    build: ./backend
    container_name: db-problems-backend
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "5001:5001"
    environment:
      - DB_HOST=mysql
      - DB_USER=dbuser
      - DB_PASSWORD=dbpassword
      - DB_NAME=dbproblems
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://otel-collector:4318
      - OTEL_SERVICE_NAME=db-problems-backend
    networks:
      - app-network

  # Node.js Frontend
  frontend:
    build: ./frontend
    container_name: db-problems-frontend
    restart: always
    depends_on:
      - backend
    ports:
      - "3000:3000"
    environment:
      - BACKEND_URL=http://backend:5001
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=db-problems-frontend
    networks:
      - app-network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    environment:
      - LOGZIO_LOGS_TOKEN=${LOGZIO_LOGS_TOKEN}
      - LOGZIO_METRICS_TOKEN=${LOGZIO_METRICS_TOKEN}
      - LOGZIO_TRACES_TOKEN=${LOGZIO_TRACES_TOKEN}
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP http receiver
      - "55670:55679" # zpages extension
    networks:
      - app-network

  # Load Generator
  load-generator:
    build: ./load-generator
    container_name: db-problems-load-generator
    depends_on:
      - backend
    environment:
      - TARGET_HOST=http://backend:5001
      - DEFAULT_DURATION=300  # 5 minutes default
      - DEFAULT_USERS=10      # 10 concurrent users default
      - DEFAULT_RATE=5        # 5 requests per second default
    volumes:
      - ./load-generator/reports:/app/reports
    networks:
      - app-network
    # By default, the load generator service will not start automatically
    # Use 'docker-compose run load-generator' to run load tests manually
    profiles:
      - loadtest
    command: ["--host", "${TARGET_HOST:-http://backend:5001}", "--duration", "${DURATION:-300}", "--users", "${USERS:-10}"]

networks:
  app-network:
    driver: bridge

volumes:
  mysql-data: